% zr0.satyh: ZR temporary package
%
% Copyright (c) 2019 Takayuki YATO (aka. "ZR")
%   GitHub:   https://github.com/zr-tex8r
%   Twitter:  @zr_tex8r
% Distributed under the MIT License.
@require: zrbase0

% Note: Just a temporary module.

%=========================================================== module ZR0
module ZR0 : sig

val snowman : string
val space : string
val empty : string
val iota : int -> int list
val reverse : 'a list -> 'a list
direct +ZR-center : [inline-text] block-cmd
direct +ZR-flushright : [inline-text] block-cmd
direct \ZR-size : [length; inline-text] inline-cmd
direct \ZR-fontspec : [string * string; inline-text] inline-cmd
direct \ZR-al-fontspec : [string; inline-text] inline-cmd
direct \ZR-ja-fontspec : [string; inline-text] inline-cmd
direct \ZR-force-script : [script; inline-text] inline-cmd
direct \ZR-ja : [inline-text] inline-cmd
direct \ZR-al : [inline-text] inline-cmd
direct \ZR-snowman : [] inline-cmd

end = struct

let snowman = string-unexplode [9731] % NICE!!
let space = string-unexplode [32]
let empty = string-unexplode []

let iota n =
  let-rec iter | 0 rs = rs
               | k rs = iter (k - 1) ((k - 1) :: rs) in
  iter n []

let reverse xs =
  let-rec iter | [] rs = rs
              | (x::xs) rs = iter xs (x :: rs) in
  iter xs []

let-block ctx +ZR-center it =
  line-break true true ctx (inline-fil ++ read-inline ctx it ++ inline-fil)
let-block ctx +ZR-flushright it =
  line-break true true ctx (inline-fil ++ read-inline ctx it)

let-inline ctx \ZR-size size it =
  let ctx1 = ctx |> set-font-size size in
  read-inline ctx1 it

%------- font something

let font-ratio-latin = 1.
let font-ratio-cjk = 0.88

let font-latin fname = (fname, font-ratio-latin, 0.)
let font-cjk fname = (fname, font-ratio-cjk, 0.)

let set-cjk-font font ctx =
  ctx |> set-font HanIdeographic font
      |> set-font Kana           font
let set-all-font font ctx =
  ctx |> set-font HanIdeographic font
      |> set-font Kana           font
      |> set-font Latin          font
      |> set-font OtherScript    font

let-inline ctx \ZR-fontspec (alfont,jafont) it =
  let ctx1 = ctx
    |> set-font Latin (font-latin alfont)
    |> set-cjk-font (font-cjk jafont) in
  read-inline ctx1 it

let-inline ctx \ZR-al-fontspec alfont it =
  let ctx1 = ctx
    |> set-font Latin (font-latin alfont) in
  read-inline ctx1 it

let-inline ctx \ZR-ja-fontspec jafont it =
  let ctx1 = ctx
    |> set-cjk-font (font-cjk jafont) in
  read-inline ctx1 it

let-inline ctx \ZR-force-script scr it =
  let ctx1 = ctx
    |> set-all-font (get-font scr ctx) in
  script-guard scr (read-inline ctx1 it)
let-inline \ZR-ja it = {\ZR-force-script(Kana){#it;}}
let-inline \ZR-al it = {\ZR-force-script(Latin){#it;}}

let-inline \ZR-snowman = % NICE!!
  {\ZR-force-script(Kana)(embed-string snowman);}

end
%=========================================================== all done
% EOF
